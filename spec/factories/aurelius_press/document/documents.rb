# == Schema Information
#
# Table name: aurelius_press_documents
#
#  id               :bigint           not null, primary key
#  user_id          :bigint           not null
#  category_id      :bigint
#  type             :string           not null
#  slug             :string           not null
#  title            :string           not null
#  subtitle         :string
#  description      :text
#  status           :integer          default("draft"), not null
#  visibility       :integer          default("private_to_owner"), not null
#  published_at     :datetime
#  created_at       :datetime         not null
#  updated_at       :datetime         not null
#  comments_enabled :boolean          default(FALSE), not null
#
FactoryBot.define do
  factory :aurelius_press_document_document, class: "AureliusPress::Document::Document" do
    # STI (Single Table Inheritance)
    #
    # Attributes:
    # - [Required] type: string,  used for Single Table Inheritance (STI)
    # - [Required] title: string, the title of the document
    # - [Required] slug: string, a URL-friendly version of the title (auto-generated))
    # - [Required] status: enum, representing the document's status (draft, published, archived)
    # - [Required] visibility: enum, representing who can see the document (private_to_owner, etc.)
    # - [Required] user: references, the user who created the document
    #
    # - [Optional] subtitle: string, a short descriptive subtitle
    # - [Optional] description: text, a short description or excerpt
    # - [Optional] category: references, the category the document belongs to
    # - [Optional] tags: references, the tags associated with the document
    # - [Optional] content: text, rich text content for documents that support it
    # - [Optional] document_file: file, for attaching files [images]
    # - [Optional] published_at: datetime, the date when the document was published
    # - [Optional] comments_enabled: boolean, whether comments are allowed on the document

    # Association: Ensures a user is created and associated with the document
    association :user, factory: :aurelius_press_user, strategy: :build
    # Association: Optionally associates a category. If `nil` or not provided,
    # it will create a categor                                              y. Set `category { nil }` to explicitly not assign one.
    # association :category, f                      actory: :category # Creates a category for the document
    # STI type for the documen                                              t is Hardcoded in sub-classes
    type { nil } # Default type for the document is nil, which will be set in subclasses
    # Basic attributes for the Document model
    sequence(:title) { |n| "Doc No. #{n} #{Faker::Book.title}" } # Generates a realistic book title
    # Callbacks: The `slug` is typically generated by a `before_validation` callback
    slug { title.parameterize } # Ensures uniqueness
    # Enums: Selects a random status from the defined enum values in the Document model
    status { :draft } # e.g., :draft, :published, :archived
    # Enums: Selects a random visibility from the defined enum values
    visibility { :private_to_owner } # e.g., :private_to_owner, :public_to_www

    # Optional attributes for sub-classes
    # subtitle { Faker::Lorem.sentence(word_count: 5) } # A short descriptive sentence
    # description { Faker::Lorem.paragraph(sentence_count: 3) } # A short paragraph for SEO/excerpt

    ############################################################################
    # Global traits for all sub-classes of Document
    trait :draft do
      status { :draft }
      published_at { nil }
      visibility { :private_to_owner }
    end

    trait :published do
      status { :published }
      published_at { Time.current }
    end

    trait :archived do
      status { :archived }
      published_at { 1.year.ago }
    end

    trait :visible_to_www do
      published
      visibility { :public_to_www }
    end

    trait :visible_to_app_users do
      published
      visibility { :private_to_app_users }
    end

    trait :visible_to_group do
      published
      visibility { :private_to_group }
    end

    trait :visible_to_owner do
      published
      visibility { :private_to_owner }
    end

    trait :published_1_day_ago do
      status { :published }
      published_at { 1.day.ago }
    end

    trait :published_1_week_ago do
      status { :published }
      published_at { 1.week.ago }
    end

    trait :published_1_month_ago do
      status { :published }
      published_at { 1.month.ago }
    end

    trait :published_tomorrow do
      status { :published }
      published_at { 1.day.from_now }
    end

    trait :not_published do
      status { :draft }
      published_at { nil }
    end

    trait :with_notes do
      after(:create) do |document|
        AureliusPress::Document::Document.visibilities.keys.each do |visibility|
          # Creates a note for each visibility type
          create(
            :aurelius_press_fragment_note,
            notable: document,
            user: document.user,
            status: :published,
            visibility: visibility,
            title: "Doc #{document.id} - Note: #{visibility.to_s.humanize}",
            content: ActionText::RichText.new(body: Faker::Lorem.sentences(number: 3).join("\n\n")),
          )
        end
      end
    end

    trait :with_3_comments do
      comments_enabled { true }
      after(:create) do |document|
        create_list(:aurelius_press_fragment_comment, 3, commentable: document)
      end
    end

    trait :with_parent_child_grandchild_comments do
      comments_enabled { true }
      after(:create) do |document|
        comenters = create_list(:aurelius_press_user, 3) # Create 3 users to comment
        create_list(:aurelius_press_fragment_comment, 1, commentable: document, user: comenters.sample).each do |comment|
          create_list(:aurelius_press_fragment_comment, 1, commentable: comment, user: comenters.sample).each do |reply|
            create_list(:aurelius_press_fragment_comment, 1, commentable: reply, user: comenters.sample)
          end
        end
      end
    end

    trait :with_3x3x3_comments do
      comments_enabled { true }
      after(:create) do |document|
        comenters = create_list(:aurelius_press_user, 3) # Create 3 users to comment
        create_list(:aurelius_press_fragment_comment, 3, commentable: document, user: comenters.sample).each do |comment|
          create_list(:aurelius_press_fragment_comment, 3, commentable: comment, user: comenters.sample).each do |reply|
            create_list(:aurelius_press_fragment_comment, 3, commentable: reply, user: comenters.sample)
          end
        end
      end
    end

    trait :with_category do
      association :category, factory: :aurelius_press_taxonomy_category
    end

    trait :with_tags do
      after(:create) do |document|
        create_list(:aurelius_press_taxonomy_tag, 3, documents: [document])
      end
    end

    # Creates at least 3 random types of content blocks
    trait :with_content_blocks do
      transient do
        block_count { 3 }
      end
      after(:create) do |the_document, evaluator|
        evaluator.block_count.times do
          create(
            :aurelius_press_content_block_content_block,
            "as#{AureliusPress::ContentBlock::ContentBlock::TYPES.sample}".underscore.to_sym,
            document: the_document,
          )
        end
      end
    end

    trait :with_one_of_each_content_block do
      after(:create) do |the_document|
        # Clear existing content blocks
        the_document.content_blocks.destroy_all
        # Create one of each type of content block
        AureliusPress::ContentBlock::ContentBlock::TYPES.each do |type|
          create(
            :aurelius_press_content_block_content_block,
            "as#{type}".underscore.to_sym,
            document: the_document,
          )
        end
      end
    end

    trait :with_likes do
      transient do
        likes_count { 3 }
      end
      after(:create) do |page, evaluator|
        # Create a list of unique users first
        users_for_likes = create_list(:aurelius_press_user, evaluator.likes_count)
        evaluator.likes_count.times do |i|
          # Use a distinct user from the list for each like
          create(:aurelius_press_community_like, likeable: page, user: users_for_likes[i])
        end
      end
    end

    trait :with_belt_and_braces do
      # Ensures all attributes are set for a complete AtomicBlogPost
      subtitle { Faker::Lorem.sentence(word_count: 5) } # A short descriptive sentence
      description { Faker::Lorem.paragraph(sentence_count: 3) } # A short paragraph for SEO/excerpt
      comments_enabled { true }
      visible_to_www
      published_1_month_ago
      with_content_blocks
      with_category
      with_tags
      with_3x3x3_comments
      with_notes
      with_likes
    end
    ############################################################################
  end
end
