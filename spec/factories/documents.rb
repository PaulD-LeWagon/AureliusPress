# spec/factories/documents.rb
FactoryBot.define do
  factory :document do
    # Association: Ensures a user is created and associated with the document
    association :user

    # Association: Optionally associates a category. If `nil` or not provided,
    # it will create a category. Set `category { nil }` to explicitly not assign one.
    association :category, factory: :category # Creates a category for the document

    # Basic attributes for the Document model
    title { Faker::Book.title } # Generates a realistic book title
    subtitle { Faker::Lorem.sentence(word_count: 5) } # A short descriptive sentence
    description { Faker::Lorem.paragraph(sentence_count: 3) } # A short paragraph for SEO/excerpt
    published_at { Faker::Time.between(from: 1.year.ago, to: Time.current) } # A date within the last year

    # Enums: Selects a random status from the defined enum values in the Document model
    status { Document.statuses.keys.sample } # e.g., :draft, :published, :archived
    # Enums: Selects a random visibility from the defined enum values
    visibility { Document.visibilities.keys.sample } # e.g., :private_to_owner, :public_to_www

    # Callbacks: The `slug` is typically generated by a `before_validation` callback
    # in the Document model, so we might leave it blank here to let the callback handle it.
    # If you need to test explicit slugs, you can define it here:
    slug { title.parameterize + "-#{SecureRandom.hex(4)}" } # Ensures uniqueness

    # Action Text: Attaches rich text content.
    # This requires an instance of ActionText::RichText to be associated.
    # The `content` attribute is what Trix editor binds to.
    after(:build) do |document|
      # Ensure content is always present for ActionText fields
      document.content = ActionText::RichText.new(body: Faker::Lorem.paragraphs(number: 3).join("\n\n"))
    end

    # Active Storage: Attaches a document file.
    # Similar to avatar, assumes a fixture file exists.
    after(:build) do |document|
      unless document.document_file.attached?
        document.document_file.attach(io: File.open(Rails.root.join("spec", "fixtures", "files", "test_document.txt")), filename: "test_document.txt", content_type: "text/plain")
      end
    end

    # STI Trait: Sets the `type` column for Single Table Inheritance.
    # This trait makes a generic Document model behave as an STI parent if its type is not explicitly set.
    trait :as_generic_document do
      type { nil } # No specific type, just a base Document
    end

    # Example of a published document
    trait :published do
      status { :published }
      published_at { Time.current }
    end

    # Example of a draft document
    trait :draft do
      status { :draft }
      published_at { nil }
    end
  end

  # STI Child Factories: These inherit from the base :document factory
  # and automatically set the `type` attribute for STI.
  # factory :page, parent: :document do
  #   # Overrides the `type` column to 'Page' for STI
  #   type { "Page" }
  # end

  # factory :blog_post, parent: :document do
  #   type { "BlogPost" }
  #   # Add specific traits or attributes relevant only to BlogPost if any
  # end

  # factory :journal_entry, parent: :document do
  #   type { "JournalEntry" }
  #   # Journal entries might default to private visibility
  #   visibility { :private_to_owner }
  # end

  # factory :note, parent: :document do
  #   type { "Note" }
  #   # Notes might default to private visibility
  #   visibility { :private_to_owner }
  # end

  # factory :comment, parent: :document do
  #   type { "Comment" }
  #   # Comments are also Documents in this STI setup,
  #   # but the Project Plan also specifies a separate Comment model for polymorphic associations.
  #   # This factory is for if Comment is an STI Document type.
  #   # The separate Comment model below is likely what's needed for polymorphic comments on other things.
  #   # This might indicate a slight ambiguity in the plan regarding Comment's role.
  #   # For now, we'll assume Comment is *also* an STI Document subtype.
  # end
end
